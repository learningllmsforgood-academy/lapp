- starting the course: https://nextjs.org/learn/foundations/about-nextjs

why njs?
========

- has lego pieces to create fast web applications

things to consider / building blocks in a web app:

1. UI: how users consume info & interact with the app.

2. Routing: navigation between different parts of the app.

3. Data Fetching: where does the src data live and how to get it to the app?

4. Rendering: generate content (html + css) - static / dynamic

5. Integrations: Interface with 3rd party services / APIs. e.g. auth, CMS, payments etc.

6. Infra: where does the app live and how it is deployed - serverless, CDN, edge, etc.

7. Performance: make the app fast for end-user.

8. Scalability: when team / users / data grow, how does the app adapt?

9. Devx (Developer Experience): how is easy it is for devs to build and maintain the app.


For each of these, need to choose:

- build in-house
- use existing libraries / frameworks

--

React.js
========

JS library for building user interfaces.
    -----               ---------------

UI? the element users see and interact with. Mostly on-screen.

both +ve & -ve: very unopinionated.
can lead to a lot of time being spend on configuring tools and reinventing solutions to common app requirements.

Next.js
=======

- Provides structure around React.
- handles tooling and configuration.
- can also adopt next.js incrementally


DOM
====

- Ref / tutorial on dom manipulation using vanilla JS - https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents


Aside - unpkg | umd
===================

- unpkg.com is CDN for any node module.
- best to UMD (universal module definition)
    - what is UMD?
       - https://dev.to/iggredible/what-the-heck-are-cjs-amd-umd-and-esm-ikm#umd
       - https://dontkry.com/posts/code/browserify-and-the-universal-module-definition.html
       - https://github.com/umdjs/umd/



React State
===========

- apart from `useState` React provides a bunch of APIs to manage state. examples:
    - `useReducer`
    - `useContext`

Reference: https://react.dev/learn/managing-state


How Next.js Works
=================

[https://nextjs.org/learn/foundations/how-nextjs-works]

- basics of how next.js works
- react is unopionated about how to build and structure apps.
    - next.js provides this structure.
        - + optimizations to make dev and prod faster
    - key concepts:
        - env where my code runs? :: dev / prod
            - dev
                - optimze for dev experience. comes with
                    - TypeScript
                    - ESLint
                    - Fast Refresh
                    - ...
            - prod
                - optimize for end user experience
                    - transform code to make it more performant
                        - { similar to babel / vite / webpack work }
                            - compile
                            - bundle
                            - minify
                            - split

            - how?
                - next.js compiler
                    - written in Rust
                        - + SWC => what is it?
                            - platform that can be used for:
                                - compilation, minification, bundling, etc.

            - components

                - compilation
                    - transpile Typescript + JSX to JS that can be run on browsers
                        - happens both during dev and prod build
                - minification
                    - remove formatting, indenting, etc.
                    - reduce file size in prod
                - bundling
                    - resolve import / export graph
                    - { create a single bundle.js / app.js containing all the code for the app }
                - code spliting
                    - { 
                        input:  bundle.js
                        output: common.js, page1.js / chunk1.js, page2.js / chunk2.js, etc.
                    }
                    - each file in `pages/` will be split into its own bundle.
                        - code shared between pages is also split into its own
                            bundle to avoid downloading duplicate code
                        - after initial load njs pre loads bundles that are likely to be used
                        - can also control it manually:
                            - dynamic imports.
            
        - when my code runs? :: build time / runtime

            - build time (build step)
                - njs takes code written by devs and transforms it into different files:
                    - static HTML + CSS files
                    - js code file(s) that run on the server {to render the page server side}
                    - js code file(s) that run on the client (browser) {to make the app interactive}
                    

            - runtime (request time)
                - after app has been built and deployed
                    - code that runs on user request
                        - { mostly refers to server side code } 
                        - { similart to serverless functions }


        - where rendering happens? :: client / server
            - client
                - { user's device (brower). send's request to server for app code }
                - { also sends requests to server for data }
            - server
                - { computer that runs in a data center }
                - { stores application code }
                - { request from client => < computation on server > => response to client }

            - what is rendering?
                - { dev react code => < rendering process > => UI HTML }

            - where does rendering take place?
                - both client and server

            - when does rendering take place?
                - both of:
                    1. ahead of time (during the build phase)
                    2. on demand (on every request) (at runtime)

            - types of rendering on next.js
                - server-side rendering (SSR)
                - static site generation (SSG)
                - client-side rendering (CSR)

                -  { SSR + SSG => together called pre-rendering }
                    - why? fetching of external data (server side props)
                        and transformation of React components into HTML
                            happens before request is sent by client
                    - { can be thought of like a caching layer }
                
                - client side rendering
                    - { in classic react: server sends empty HTML "shell" 
                        + JS code (instructions on how to render HTML) }
                        - { rendering happens on user device }
        
                        - next.js also allows for client side rendering:
                            - fetch data using -
                                - >> <b>`useEffect`</b>
                                - >> <b>`useSWR`</b>
                
                - by default: next.js pre-renders every page by default
                    - HTML generated in advance on server
                        - { for blog like content: better for SEO }
                        - { faster initial page renders }
                        - { low time to initial user interactivity }
                
                - pre-render
                    - SSR: Server Side Rendering
                        - HTML generation on server for each request
                            - generated HTML + JSON data { required for hydration }
                                + JS { to make page interactive } sent to client.
                            - hydration: react uses generated json data + JS code
                                to make the interactive, continuing from the same
                                state as the server side generated HTML
                        
                        - >> can opt into SSR by using <b>`getServerSideProps`</b>

                        - NOTE: next 12 + react 18 also include alpha version of <i>React server components</i>
                            - it does not have any client-side js to render
                        
                    - SSG: Static Site Generation
                        - HTML generated, but on each on each request
                            - done ahead of time, during the build phase
                            - generated HTML is stored in a CDN
                                - reused for each request
                            - { sounds much more efficient }
                        
                        - >> can opt to SSG by using <b>`getStaticProps`</b>

                        - can also use <b>Incremental Static Regeneration</b>
                            - can update build static HTML
                            - don't have to do pull rebuild of entire site
                            - kind of like applying deltas

                    - << the next.js advantage >>
                        - can choose the best rendering method on a page-by-page basis
                            - >> read more in the <i>data fetching docs</i>
                    
                    



                     




                - << network >>

                    - components
                        - origin servers
                        - CDNs
                        - Edge

                    - CDN
                        - store static content
                        - geographically distributed
                        - uses benefits of caching
                        
                    - "The Edge"
                        - servers / computers part of the network that are closest to the user
                        - Technically CDNs are also part of "The Edge"
                        - In general Edge servers can also run small snippets of code
                        - Essentially reduces latency
                        - kind of a perf optimization


First Next.js App
================

[https://nextjs.org/learn/basics/create-nextjs-app]

> will create a simple demo blog using next

uses [this](https://github.com/vercel/next-learn/tree/main/basics/learn-starter) as the starter code.

```
npx create-next-app@latest nextjs-blog --use-npm --example "https://github.com/vercel/next-learn/tree/main/basics/learn-starter"
```